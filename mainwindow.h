#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QThread>      // For running worker in a separate thread
#include <QLabel>       // For status bar labels
#include <QProgressBar> // For status bar progress
#include <QCheckBox>    // For customizing checkboxes
// #include <QPlainTextEdit> // Included via ui_mainwindow.h if added in designer

// <-- New Includes -->
#include <QStandardItemModel>   // For table view data
#include <QSortFilterProxyModel>// For filtering/sorting table view
#include <QItemSelection>       // For context menu selection
#include <QMenu>                // For context menu
#include <QPoint>               // For context menu position

#include "searchworker.h" // Include the worker definition
#include "searchlogic.h"  // Include SearchConfig definition

// Forward declaration for the UI class generated by Qt Designer
QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; } // Assumes ui file contains pointers to new widgets
QT_END_NAMESPACE

// Forward declare QAction if needed separately (usually not)
// class QAction;

class MainWindow : public QMainWindow
{
    Q_OBJECT // Macro required for signals/slots

public:
    MainWindow(QWidget *parent = nullptr);
    ~MainWindow();

private slots:
    // --- Slots for UI interaction ---
    void on_browseStartPathButton_clicked();
    void on_browseOutputFileButton_clicked();
    void on_startButton_clicked();
    void on_cancelButton_clicked();
    void on_pauseButton_clicked(); // <-- New slot for pause/resume button
    void on_resultsFilterLineEdit_textChanged(const QString &text); // <-- New slot for filter input
    void showResultsContextMenu(const QPoint &pos); // <-- New slot for context menu request

    // --- Slots to handle signals from SearchWorker ---
    void handleResultFound(const QString& path); // Path is added to model now
    void handleErrorOccurred(const QString& message); // Will append to error display
    void handleSearchFinished(unsigned long long count, double duration);
    void handleProgressUpdate(const QString& message); // General status
    void handleProgressDetailUpdate(quint64 filesScanned, const QString& currentDir); // <-- New slot for detailed progress

    // --- Slot for thread cleanup ---
    void onSearchThreadFinished();

    // --- Slots for Context Menu Actions ---
    void openFileLocation(); // <-- New
    void copyFilePath();     // <-- New


private:
    Ui::MainWindow *ui; // Pointer to the UI elements (assumes TableView, filter LineEdit, etc. are here)

    QThread* searchThread; // Pointer to the thread object
    SearchWorker* worker;  // Pointer to the worker object

    // --- Data Models for Results Table ---
    QStandardItemModel *resultsModel;       // <-- New: Holds the actual result data
    QSortFilterProxyModel *resultsProxyModel; // <-- New: Handles sorting and filtering for the view

    // --- State Variables ---
    unsigned long long currentFoundCount;   // Counter for found items display
    quint64 currentScannedCount;            // <-- New: Counter for scanned items display
    bool isSearchPaused;                    // <-- New: Track UI pause state

    // --- Status bar widgets ---
    QLabel *statusLabel;
    QLabel *countLabel;
    QLabel *scannedLabel; // <-- New: Label for scanned count
    QProgressBar *progressBar; // Will still use indeterminate mode mostly

    // --- Context Menu ---
    QMenu *resultsContextMenu; // <-- New
    QAction *openLocationAction; // <-- New
    QAction *copyPathAction;     // <-- New

    // --- Helper Methods ---
    void setupStatusBar(); // Modified to add scannedLabel
    void setupResultsView(); // <-- New: Setup table view properties & model connections
    void createContextMenu(); // <-- New: Create context menu actions
    void setGuiEnabled(bool enabled); // Modified to include pause button state
    void customizeCheckbox(QCheckBox* checkbox); // Existing helper

    // Helper to get selected path from table view for context menu
    QString getSelectedPathFromView() const;

};
#endif // MAINWINDOW_H
